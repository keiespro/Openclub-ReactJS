'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactBootstrap = require('react-bootstrap');

var _draftJs = require('draft-js');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _emptyFunction = require('utils/emptyFunction');

var _emptyFunction2 = _interopRequireDefault(_emptyFunction);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var TextEditor = function (_Component) {
  (0, _inherits3.default)(TextEditor, _Component);

  function TextEditor(props) {
    (0, _classCallCheck3.default)(this, TextEditor);

    var _this = (0, _possibleConstructorReturn3.default)(this, (TextEditor.__proto__ || (0, _getPrototypeOf2.default)(TextEditor)).call(this, props));

    _this.state = { editorState: _draftJs.EditorState.createEmpty() };

    _this.onBoldClick = _this.onBoldClick.bind(_this);
    _this.onChange = _this.onChange.bind(_this);
    return _this;
  }

  (0, _createClass3.default)(TextEditor, [{
    key: 'onChange',
    value: function onChange(editorState) {
      var name = this.props.name;

      this.setState({ editorState: editorState });
      var content = editorState.getCurrentContent();
      this.props.onChange(name, content.getBlockMap());
    }
  }, {
    key: 'onBoldClick',
    value: function onBoldClick() {
      this.onChange(_draftJs.RichUtils.toggleInlineStyle(this.state.editorState, 'BOLD'));
    }
  }, {
    key: 'render',
    value: function render() {
      var withoutKeys = function withoutKeys(object) {
        return _lodash2.default.omit(object, ['children', 'containerClassName']);
      };
      var _props = this.props,
          name = _props.name,
          children = _props.children;

      var label = this.props.label;
      var help = this.props.help;
      var formGroupProps = {};
      var controlLabelProps = {};
      var helpBlockProps = {};
      var containerClassName = '';
      var formControlProps = {
        name: name,
        onChange: this.onChange,
        editorState: this.state.editorState
      };

      if (children) {
        _react.Children.forEach(children, function (child) {
          if (child.type === _reactBootstrap.ControlLabel) {
            label = child.props.children;
            controlLabelProps = withoutKeys(_lodash2.default.merge(controlLabelProps, child.props));
          }
          if (child.type === _reactBootstrap.HelpBlock) {
            help = child.props.children;
            helpBlockProps = withoutKeys(_lodash2.default.merge(helpBlockProps, child.props));
          }
        });
      }

      return _react2.default.createElement(
        _reactBootstrap.FormGroup,
        (0, _extends3.default)({
          controlId: 'formcontrol-' + name
        }, formGroupProps),
        _react2.default.createElement(
          _reactBootstrap.ControlLabel,
          controlLabelProps,
          label
        ),
        _react2.default.createElement(
          'button',
          { type: 'button', onClick: this.onBoldClick },
          'Bold'
        ),
        _react2.default.createElement(
          'div',
          { className: containerClassName },
          _react2.default.createElement(_draftJs.Editor, formControlProps),
          _react2.default.createElement(
            _reactBootstrap.HelpBlock,
            helpBlockProps,
            help
          )
        )
      );
    }
  }]);
  return TextEditor;
}(_react.Component);

TextEditor.defaultProps = {
  help: '',
  label: ''
};
TextEditor.propTypes = {
  children: _react.PropTypes.oneOfType([_react.PropTypes.array, _react.PropTypes.element]),
  label: _react.PropTypes.string,
  help: _react.PropTypes.string,
  onChange: _react.PropTypes.func,
  name: _react.PropTypes.string.isRequired,
  value: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.number, _react.PropTypes.bool])
};
exports.default = TextEditor;