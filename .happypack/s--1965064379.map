{"version":3,"sources":["src/components/Forms/TextEditor.jsx"],"names":["TextEditor","props","state","editorState","createEmpty","onBoldClick","bind","onChange","name","setState","content","getCurrentContent","getBlockMap","toggleInlineStyle","withoutKeys","object","omit","children","label","help","formGroupProps","controlLabelProps","helpBlockProps","containerClassName","formControlProps","forEach","child","type","merge","defaultProps","propTypes","oneOfType","array","element","string","func","isRequired","value","number","bool"],"mappings":"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","file":"TextEditor.jsx","sourceRoot":"/Volumes/Git HD/Code/openclub","sourcesContent":["import React, { Component, PropTypes, Children } from 'react'\nimport { FormGroup, ControlLabel, HelpBlock } from 'react-bootstrap'\nimport { Editor, EditorState, RichUtils } from 'draft-js'\nimport _ from 'lodash'\nimport emptyFunction from 'utils/emptyFunction'\n\nclass TextEditor extends Component {\n  static defaultProps = {\n    help: '',\n    label: ''\n  }\n  static propTypes = {\n    children: PropTypes.oneOfType([\n      PropTypes.array,\n      PropTypes.element\n    ]),\n    label: PropTypes.string,\n    help: PropTypes.string,\n    onChange: PropTypes.func,\n    name: PropTypes.string.isRequired,\n    value: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n      PropTypes.bool\n    ])\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {editorState: EditorState.createEmpty()};\n\n    this.onBoldClick = this.onBoldClick.bind(this);\n    this.onChange = this.onChange.bind(this);\n  }\n  onChange(editorState) {\n    const { name } = this.props;\n    this.setState({editorState});\n    const content = editorState.getCurrentContent();\n    this.props.onChange(name, content.getBlockMap());\n  }\n  onBoldClick() {\n    this.onChange(RichUtils.toggleInlineStyle(this.state.editorState, 'BOLD'));\n  }\n  render() {\n    const withoutKeys = (object) => _.omit(object, ['children', 'containerClassName']);\n    const { name, children } = this.props;\n    let label = this.props.label;\n    let help = this.props.help;\n    let formGroupProps = {};\n    let controlLabelProps = {};\n    let helpBlockProps = {};\n    let containerClassName = '';\n    let formControlProps = {\n      name,\n      onChange: this.onChange,\n      editorState: this.state.editorState\n    };\n\n    if (children) {\n      Children.forEach(children, (child) => {\n        if (child.type === ControlLabel) {\n          label = child.props.children;\n          controlLabelProps = withoutKeys(_.merge(controlLabelProps, child.props));\n        }\n        if (child.type === HelpBlock) {\n          help = child.props.children;\n          helpBlockProps = withoutKeys(_.merge(helpBlockProps, child.props));\n        }\n      });\n    }\n\n    return (\n      <FormGroup\n        controlId={`formcontrol-${name}`}\n        {...formGroupProps}\n      >\n        <ControlLabel {...controlLabelProps}>{label}</ControlLabel>\n        <button type=\"button\" onClick={this.onBoldClick}>Bold</button>\n        <div className={containerClassName}>\n          <Editor {...formControlProps} />\n          <HelpBlock {...helpBlockProps}>{help}</HelpBlock>\n        </div>\n      </FormGroup>\n    )\n  }\n}\n\nexport default TextEditor\n"]}