'use strict';

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var webpack = require('webpack');
var ExtractTextPlugin = require('extract-text-webpack-plugin');
var HappyPackLoader = require('happypack');
var config = require('../config/index');
var fs = require('fs');

module.exports = function () {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$production = _ref.production,
      production = _ref$production === undefined ? false : _ref$production,
      _ref$browser = _ref.browser,
      browser = _ref$browser === undefined ? false : _ref$browser;

  var bannerOptions = { raw: true, banner: 'require("source-map-support").install();' };
  var compress = { warnings: false };

  var ExtractText = new ExtractTextPlugin({ filename: '[name].[hash].css', allChunks: true });
  var CommonChunks = new webpack.optimize.CommonsChunkPlugin({
    names: ['vendor']
  });
  var HappyPack = [new HappyPackLoader({
    loaders: ['babel-loader']
  }), new HappyPackLoader({
    id: 'style-loader',
    loaders: ['style-loader']
  }), new HappyPackLoader({
    id: 'css-loader',
    loaders: ['css-loader']
  }), new HappyPackLoader({
    id: 'sass-loader',
    loaders: ['sass-loader']
  }), new HappyPackLoader({
    id: 'url-loader',
    loaders: ['url-loader']
  })];

  function BuildStats() {
    this.plugin("done", function (stats) {
      fs.writeFileSync(config.paths.dist + '/stats.json', (0, _stringify2.default)(stats.toJson()));
    });
  }

  if (!production && !browser) {
    return [new webpack.DefinePlugin(config.globals), new webpack.EnvironmentPlugin(['NODE_ENV']), ExtractText, new webpack.BannerPlugin(bannerOptions)].concat(HappyPack);
  }
  if (!production && browser) {
    return [BuildStats, CommonChunks, new webpack.DefinePlugin(config.globals), new webpack.EnvironmentPlugin(['NODE_ENV']), new webpack.HotModuleReplacementPlugin(), new webpack.NoEmitOnErrorsPlugin(), new webpack.NamedModulesPlugin(), ExtractText, new webpack.NoEmitOnErrorsPlugin()].concat(HappyPack);
  }
  if (production && !browser) {
    return [new webpack.DefinePlugin(config.globals), new webpack.EnvironmentPlugin(['NODE_ENV']), new webpack.BannerPlugin(bannerOptions), ExtractText, new webpack.optimize.UglifyJsPlugin({ compress: compress })].concat(HappyPack);
  }
  if (production && browser) {
    return [BuildStats, CommonChunks, new webpack.DefinePlugin(config.globals), new webpack.EnvironmentPlugin(['NODE_ENV']), ExtractText, new webpack.optimize.UglifyJsPlugin({ compress: compress })].concat(HappyPack);
  }
  return [];
};