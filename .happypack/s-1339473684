'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactBootstrap = require('react-bootstrap');

var _reactDatePicker = require('react-date-picker');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

require('./styles/DateField.scss');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DateFieldInput = function (_Component) {
  (0, _inherits3.default)(DateFieldInput, _Component);

  function DateFieldInput() {
    (0, _classCallCheck3.default)(this, DateFieldInput);
    return (0, _possibleConstructorReturn3.default)(this, (DateFieldInput.__proto__ || (0, _getPrototypeOf2.default)(DateFieldInput)).apply(this, arguments));
  }

  (0, _createClass3.default)(DateFieldInput, [{
    key: 'render',
    value: function render() {
      var withoutKeys = function withoutKeys(object) {
        return _lodash2.default.omit(object, ['children', 'containerClassName']);
      };
      var _props = this.props,
          name = _props.name,
          children = _props.children,
          validations = _props.validations;

      var value = this.context.getState(name);
      var validation = validations ? this.context.validateField(name, validations) : null;
      var label = this.props.label;
      var help = this.props.help;
      var formGroupProps = {};
      var controlLabelProps = {};
      var helpBlockProps = {};
      var containerClassName = '';
      var formControlProps = {
        forceValidDate: true,
        dateFormat: 'DD/MM/YYYY',
        onChange: this.context.handleChange.bind(this, name),
        date: value || new Date(),
        updateOnDateClick: true,
        collapseOnDateClick: true,
        showClock: false
      };

      if (children) {
        _react.Children.forEach(children, function (child) {
          if (child.type === _reactBootstrap.ControlLabel) {
            label = child.props.children;
            controlLabelProps = withoutKeys(_lodash2.default.merge(controlLabelProps, child.props));
          }
          if (child.type === _reactBootstrap.HelpBlock) {
            help = child.props.children;
            helpBlockProps = withoutKeys(_lodash2.default.merge(helpBlockProps, child.props));
          }
          if (child.type === _reactBootstrap.FormControl) {
            if ('containerClassName' in child.props) {
              containerClassName = child.props.containerClassName;
            }
            formControlProps = withoutKeys(_lodash2.default.merge(formControlProps, child.props));
          }
        });
      }

      if (validation) {
        formGroupProps.validationState = validation.type;
        help = validation.message;
      }

      return _react2.default.createElement(
        _reactBootstrap.FormGroup,
        (0, _extends3.default)({
          controlId: 'formcontrol-' + name
        }, formGroupProps),
        _react2.default.createElement(
          _reactBootstrap.ControlLabel,
          controlLabelProps,
          label
        ),
        _react2.default.createElement(
          'div',
          { className: containerClassName },
          _react2.default.createElement(
            _reactDatePicker.DateField,
            formControlProps,
            _react2.default.createElement(_reactDatePicker.DatePicker, {
              navigation: true,
              locale: 'en',
              forceValidDate: true,
              highlightWeekends: true,
              highlightToday: true,
              weekNumbers: true,
              weekStartDay: 0
            })
          ),
          _react2.default.createElement(
            _reactBootstrap.HelpBlock,
            helpBlockProps,
            help
          )
        )
      );
    }
  }]);
  return DateFieldInput;
}(_react.Component);

DateFieldInput.contextTypes = {
  handleChange: _react.PropTypes.func,
  getState: _react.PropTypes.func,
  validateField: _react.PropTypes.func
};
DateFieldInput.defaultProps = {
  help: '',
  label: ''
};
DateFieldInput.propTypes = {
  children: _react.PropTypes.oneOfType([_react.PropTypes.array, _react.PropTypes.element]),
  label: _react.PropTypes.string,
  help: _react.PropTypes.string,
  validations: _react.PropTypes.array,
  name: _react.PropTypes.string.isRequired
};
exports.default = DateFieldInput;