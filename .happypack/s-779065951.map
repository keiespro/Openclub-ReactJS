{"version":3,"sources":["src/modules/apollo/index.js"],"names":["networkInterface","uri","use","applyMiddleware","next","options","token","getState","auth","headers","authorization","errorLog","applyAfterware","response","clone","json","then","errors","console","error","map","e","message","useAfter","apolloClient","dataIdFromObject","obj","_id"],"mappings":";;;;;;AAGA;;;;AACA;;;;;;AAJA;;;AAMA,IAAMA,mBAAmB,0CAAuB;AAC9CC,OAAK;AADyC,CAAvB,CAAzB;;AAIAD,iBAAiBE,GAAjB,CAAqB,CAAC;AACpBC,mBAAiB,+BAAcC,IAAd,EAAuB;AAAA,QAApBC,OAAoB,QAApBA,OAAoB;;AACtC;AADsC,QAE9BC,KAF8B,GAEpB,uBAAQC,QAAR,GAAmBC,IAFC,CAE9BF,KAF8B;;;AAItC,QAAIA,KAAJ,EAAW;AACT;AACA,UAAI,CAACD,QAAQI,OAAb,EAAsB;AACpBJ,gBAAQI,OAAR,GAAkB,EAAlB;AACD;;AAEDJ,cAAQI,OAAR,CAAgBC,aAAhB,eAA0CJ,KAA1C;AACD;;AAEDF;AACD;AAfmB,CAAD,CAArB;;AAkBA,IAAMO,WAAW;AACfC,gBADe,iCACcR,IADd,EACoB;AAAA,QAAlBS,QAAkB,SAAlBA,QAAkB;;AACjCA,aAASC,KAAT,GAAiBC,IAAjB,GAAwBC,IAAxB,CAA6B,iBAAgB;AAAA,UAAbC,MAAa,SAAbA,MAAa;;AAC3C,UAAIA,MAAJ,EAAY;AACVC,gBAAQC,KAAR,CAAc,iBAAd,EAAiCF,OAAOG,GAAP,CAAW;AAAA,iBAAKC,EAAEC,OAAP;AAAA,SAAX,CAAjC;AACD;AACDlB;AACD,KALD;AAMD;AARc,CAAjB;;AAWAJ,iBAAiBuB,QAAjB,CAA0B,CAACZ,QAAD,CAA1B;;AAEA,IAAMa,eAAe,2BAAiB;AACpCxB,oCADoC;AAEpCyB,oBAAkB;AAAA,WAAOC,IAAIC,GAAX;AAAA;AAFkB,CAAjB,CAArB;;kBAKeH,Y","file":"index.js","sourceRoot":"/Volumes/Git HD/Code/openclub","sourcesContent":["/**\n * Apollo integration with openclub for graphql API\n */\nimport ApolloClient, { createNetworkInterface } from 'apollo-client'\nimport store from '../../store'\n\nconst networkInterface = createNetworkInterface({\n  uri: 'http://localhost:5000/v1/graphql'\n})\n\nnetworkInterface.use([{\n  applyMiddleware: ({ options }, next) => {\n    // check if a token is available\n    const { token } = store().getState().auth\n\n    if (token) {\n      // create headers if needed\n      if (!options.headers) {\n        options.headers = {};\n      }\n\n      options.headers.authorization = `Bearer ${token}`\n    }\n\n    next();\n  }\n}]);\n\nconst errorLog = {\n  applyAfterware({ response }, next) {\n    response.clone().json().then(({ errors }) => {\n      if (errors) {\n        console.error('GraphQL Errors:', errors.map(e => e.message));\n      }\n      next();\n    })\n  }\n}\n\nnetworkInterface.useAfter([errorLog])\n\nconst apolloClient = new ApolloClient({\n  networkInterface,\n  dataIdFromObject: obj => obj._id\n})\n\nexport default apolloClient\n"]}