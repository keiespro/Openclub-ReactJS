'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _apolloClient = require('apollo-client');

var _apolloClient2 = _interopRequireDefault(_apolloClient);

var _store = require('../../store');

var _store2 = _interopRequireDefault(_store);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Apollo integration with openclub for graphql API
 */
var networkInterface = (0, _apolloClient.createNetworkInterface)({
  uri: 'http://localhost:5000/v1/graphql'
});

networkInterface.use([{
  applyMiddleware: function applyMiddleware(_ref, next) {
    var options = _ref.options;

    // check if a token is available
    var token = (0, _store2.default)().getState().auth.token;


    if (token) {
      // create headers if needed
      if (!options.headers) {
        options.headers = {};
      }

      options.headers.authorization = 'Bearer ' + token;
    }

    next();
  }
}]);

var errorLog = {
  applyAfterware: function applyAfterware(_ref2, next) {
    var response = _ref2.response;

    response.clone().json().then(function (_ref3) {
      var errors = _ref3.errors;

      if (errors) {
        console.error('GraphQL Errors:', errors.map(function (e) {
          return e.message;
        }));
      }
      next();
    });
  }
};

networkInterface.useAfter([errorLog]);

var apolloClient = new _apolloClient2.default({
  networkInterface: networkInterface,
  dataIdFromObject: function dataIdFromObject(obj) {
    return obj._id;
  }
});

exports.default = apolloClient;