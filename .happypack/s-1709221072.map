{"version":3,"sources":["src/utils/Auth0.js"],"names":["Env","__AUTH0_CLIENT_ID__","__AUTH0_DOMAIN__","lock","inlineLock","theme","logo","primaryColor","languageDictionary","title","closable","container","additionalSignUpFields","name","placeholder","hashParsed","resolve","reject","resolveToken","result","accessToken","on"],"mappings":";;;;;;;;;;;AAAA;;;;;;WAEkDA,G;IAA1CC,mB,QAAAA,mB;IAAqBC,gB,QAAAA,gB;;;AAE7B,IAAIC,OAAO;AAAA,SAAM,IAAN;AAAA,CAAX;AACA,IAAIC,aAAa;AAAA,SAAM,IAAN;AAAA,CAAjB;;AAEA;AACA,QAkEED,IAlEF,UAAO,wBAAcF,mBAAd,EAAmCC,gBAAnC,EAAqD;AAC1DG,SAAO;AACLC,UAAM,0EADD;AAELC,kBAAc;AAFT,GADmD;AAK1DC,sBAAoB;AAClBC,WAAO;AADW,GALsC;AAQ1D;;;AAGAC,YAAU;AAXgD,CAArD,CAAP;;AAcA,QAqDEN,UArDF,gBAAa,oBAACO,SAAD;AAAA,SAAe,wBAAcV,mBAAd,EAAmCC,gBAAnC,EAAqD;AAC/ES,wBAD+E;AAE/EN,WAAO;AACLE,oBAAc;AADT,KAFwE;AAK/EK,4BAAwB,CACtB;AACEC,YAAM,SADR;AAEEC,mBAAa;AAFf,KADsB,EAKtB;AACED,YAAM,WADR;AAEEC,mBAAa;AAFf,KALsB,EAStB;AACED,YAAM;AADR,KATsB;AAaxB;;;AAlB+E,GAArD,CAAf;AAAA,CAAb;;AAuBA;;;;;;;;;AASA,IAAME,aAAa,sBAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAClD;AACA,MAAMC,eAAe,SAAfA,YAAe,SAAU;AAC7B,QAAIC,UAAUA,OAAOC,WAArB,EAAkC;AAChCJ,cAAQG,OAAOC,WAAf;AACD,KAFD,MAEO,IAAID,MAAJ,EAAY;AACjB;AACAF,aAAOE,MAAP;AACD,KAHM,MAGA;AACL;AACAH,cAAQG,MAAR;AACD;AACF,GAVD;;AAYAhB,OAAKkB,EAAL,CAAQ,aAAR,EAAuBH,YAAvB;AACAd,aAAWiB,EAAX,CAAc,aAAd,EAA6BH,YAA7B;AACD,CAhBkB,CAAnB;;QAoBEf,I,GAAAA,I;QACAC,U,GAAAA,U;QACAW,U,GAAAA,U","file":"Auth0.js","sourceRoot":"/Volumes/Git HD/Code/openclub","sourcesContent":["import Auth0Lock from 'auth0-lock'\n\nconst { __AUTH0_CLIENT_ID__, __AUTH0_DOMAIN__ } = Env\n\nlet lock = () => true;\nlet inlineLock = () => true;\n\n// singleton Auth0 lock\nlock = new Auth0Lock(__AUTH0_CLIENT_ID__, __AUTH0_DOMAIN__, {\n  theme: {\n    logo: 'https://openclubdev.github.io/openclub-assets/images/logo/logo-color.png',\n    primaryColor: '#008fcc'\n  },\n  languageDictionary: {\n    title: 'Log In to OpenClub'\n  },\n  /*auth: {\n    redirectUrl: location.origin\n  },*/\n  closable: false\n})\n\ninlineLock = (container) => new Auth0Lock(__AUTH0_CLIENT_ID__, __AUTH0_DOMAIN__, {\n  container,\n  theme: {\n    primaryColor: '#008fcc'\n  },\n  additionalSignUpFields: [\n    {\n      name: \"address\",\n      placeholder: \"enter where your babies live\",\n    },\n    {\n      name: \"full_name\",\n      placeholder: \"Enter your full name\"\n    },\n    {\n      name: \"\"\n    }\n  ]\n  /* auth: {\n    redirectUrl: location.origin\n  }*/\n});\n\n/**\n * Due to Auth0s stupid choice to use events, and the fact that they\n * emit the event with setTimeout(emit, 0), you need to subscribe\n * immediately after lock creation.\n *\n * We use the 'hash_parsed' event instead because it triggers whether\n * there is a hash or not, which allows us to link auth properly into redux.\n * We convert the event into a promise that is consumable by actions\n */\nconst hashParsed = new Promise((resolve, reject) => {\n  // catch hash parse event because of all the problems with the authentication event\n  const resolveToken = result => {\n    if (result && result.accessToken) {\n      resolve(result.accessToken)\n    } else if (result) {\n      // a non token result is an error\n      reject(result)\n    } else {\n      // a null result is a pass through\n      resolve(result)\n    }\n  }\n\n  lock.on('hash_parsed', resolveToken);\n  inlineLock.on('hash_parsed', resolveToken)\n})\n\n\nexport {\n  lock,\n  inlineLock,\n  hashParsed\n}\n"]}