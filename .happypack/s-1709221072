'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hashParsed = exports.inlineLock = exports.lock = undefined;

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _auth0Lock = require('auth0-lock');

var _auth0Lock2 = _interopRequireDefault(_auth0Lock);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _Env = Env,
    __AUTH0_CLIENT_ID__ = _Env.__AUTH0_CLIENT_ID__,
    __AUTH0_DOMAIN__ = _Env.__AUTH0_DOMAIN__;


var lock = function lock() {
  return true;
};
var inlineLock = function inlineLock() {
  return true;
};

// singleton Auth0 lock
exports.lock = lock = new _auth0Lock2.default(__AUTH0_CLIENT_ID__, __AUTH0_DOMAIN__, {
  theme: {
    logo: 'https://openclubdev.github.io/openclub-assets/images/logo/logo-color.png',
    primaryColor: '#008fcc'
  },
  languageDictionary: {
    title: 'Log In to OpenClub'
  },
  /*auth: {
    redirectUrl: location.origin
  },*/
  closable: false
});

exports.inlineLock = inlineLock = function inlineLock(container) {
  return new _auth0Lock2.default(__AUTH0_CLIENT_ID__, __AUTH0_DOMAIN__, {
    container: container,
    theme: {
      primaryColor: '#008fcc'
    },
    additionalSignUpFields: [{
      name: "address",
      placeholder: "enter where your babies live"
    }, {
      name: "full_name",
      placeholder: "Enter your full name"
    }, {
      name: ""
    }]
    /* auth: {
      redirectUrl: location.origin
    }*/
  });
};

/**
 * Due to Auth0s stupid choice to use events, and the fact that they
 * emit the event with setTimeout(emit, 0), you need to subscribe
 * immediately after lock creation.
 *
 * We use the 'hash_parsed' event instead because it triggers whether
 * there is a hash or not, which allows us to link auth properly into redux.
 * We convert the event into a promise that is consumable by actions
 */
var hashParsed = new _promise2.default(function (resolve, reject) {
  // catch hash parse event because of all the problems with the authentication event
  var resolveToken = function resolveToken(result) {
    if (result && result.accessToken) {
      resolve(result.accessToken);
    } else if (result) {
      // a non token result is an error
      reject(result);
    } else {
      // a null result is a pass through
      resolve(result);
    }
  };

  lock.on('hash_parsed', resolveToken);
  inlineLock.on('hash_parsed', resolveToken);
});

exports.lock = lock;
exports.inlineLock = inlineLock;
exports.hashParsed = hashParsed;