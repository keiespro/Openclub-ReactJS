{"version":3,"sources":["build/rules/css.js"],"names":["path","require","ExtractTextPlugin","postcssImport","postcssCssnext","postcssReporter","PATHS","module","exports","production","browser","CSS_LOADER","test","use","extract","fallback","include","src"],"mappings":";;AAAA,IAAMA,OAAOC,QAAQ,MAAR,CAAb;AACA,IAAMC,oBAAoBD,QAAQ,6BAAR,CAA1B;AACA,IAAME,gBAAgBF,QAAQ,gBAAR,CAAtB;AACA,IAAMG,iBAAiBH,QAAQ,iBAAR,CAAvB;AACA,IAAMI,kBAAkBJ,QAAQ,kBAAR,CAAxB;AACA,IAAMK,QAAQL,QAAQ,UAAR,CAAd;;AAEAM,OAAOC,OAAP,GAAiB,YAAkD;AAAA,iFAAP,EAAO;AAAA,6BAA/CC,UAA+C;AAAA,MAA/CA,UAA+C,mCAAlC,KAAkC;AAAA,0BAA3BC,OAA2B;AAAA,MAA3BA,OAA2B,gCAAjB,KAAiB;;AACjE,MAAMC,aAAaF,aAAa,YAAb,GAA4B,gCAA/C;AACA,SAAO;AACLG,UAAM,QADD;AAELC,SAAKX,kBAAkBY,OAAlB,CAA0B;AAC7BC,gBAAU,cADmB;AAE7BF,WAAK,CAAC,cAAD,OAAoBF,UAApB,EAAkC,gBAAlC;AAFwB,KAA1B,CAFA;AAMLK,aAAS,CACPV,MAAMW,GADC;AANJ,GAAP;;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,CAlED","file":"css.js","sourceRoot":"/Volumes/Git HD/Code/openclub","sourcesContent":["const path = require('path');\nconst ExtractTextPlugin = require('extract-text-webpack-plugin');\nconst postcssImport = require('postcss-import');\nconst postcssCssnext = require('postcss-cssnext');\nconst postcssReporter = require('postcss-reporter');\nconst PATHS = require('../paths');\n\nmodule.exports = ({ production = false, browser = false } = {}) => {\n  const CSS_LOADER = production ? 'css-loader' : 'css-loader?sourceMap&-minimize';\n  return {\n    test: /\\.css$/,\n    use: ExtractTextPlugin.extract({\n      fallback: \"style-loader\",\n      use: ['style-loader', `${CSS_LOADER}`, 'postcss-loader']\n    }),\n    include: [\n      PATHS.src\n    ]\n  };\n\n  // const localIndentName = 'localIdentName=[name]__[local]___[hash:base64:5]';\n  //\n  // const createCssLoaders = embedCssInBundle => ([\n  //   {\n  //     loader: ExtractTextPlugin.extract(\"style\", \"css!sass\")\n  //   },\n  //   {\n  //     loader: embedCssInBundle ? 'css-loader' : 'css-loader/locals',\n  //     options: {\n  //       localIndentName,\n  //       sourceMap: true,\n  //       modules: true,\n  //       importLoaders: 1\n  //     }\n  //   },\n  //   {\n  //     loader: 'postcss-loader',\n  //     options: {\n  //       plugins: [\n  //         postcssImport({ path: path.resolve(PATHS.src) }),\n  //         postcssCssnext({ browsers: ['> 1%', 'last 2 versions'] }),\n  //         postcssReporter({ clearMessages: true }),\n  //\n  //       ]\n  //     }\n  //   }\n  // ]);\n  //\n  // const createBrowserLoaders = extractCssToFile => loaders => {\n  //   const browserLoaders = [\n  //     {\n  //       loader: ExtractTextPlugin.extract(\"style\", \"css!sass\")\n  //     }\n  //     // { loader: 'style-loader' }\n  //   ]\n  //   if (extractCssToFile) {\n  //     // We want CSS as a file\n  //     return ExtractTextPlugin.extract({\n  //       fallback: 'style-loader',\n  //       use: loaders\n  //     });\n  //   }\n  //   return [...browserLoaders, ...loaders];\n  // };\n  //\n  // const serverLoaders = createCssLoaders(false);\n  // const browserLoaders = createBrowserLoaders(production)(createCssLoaders(true));\n  //\n  // return {\n  //   test: /\\.css$/,\n  //   use: browser ? browserLoaders : serverLoaders,\n  //   include: PATHS.src\n  // };\n};\n"]}